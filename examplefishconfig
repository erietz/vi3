source /opt/vi3/fish/utilities.fish
source /opt/vi3/fish/vi3.fish
source /opt/vi3/fish/books.fish
source /opt/vi3/fish/general.fish
source /opt/vi3/fish/audio.fish
source /opt/vi3/fish/misc.fish
source /opt/vi3/fish/mime.fish

function fish_prompt
    #z --add "$pwd"
    echo (~/bin/powerline-shell.py $status --shell bare)
end

function set-path
    set javapaths /usr/lib/jvm/java-8-oracle/bin /usr/lib/jvm/java-8-oracle/db/bin /usr/lib/jvm/java-8-oracle/jre/bin/

    set builtinpaths /usr/local/sbin /usr/local/bin /usr/sbin /usr/bin /sbin /bin /usr/games /usr/local/games

    set mypaths /opt/firefox35 /opt/vi3/bin /opt/bin /opt/dmenu /opt/scala/bin /opt/vim-qt/bin /home/michael/bin /home/michael/scripts  /opt/cxoffice/bin ~/games/dustaet/ /opt/popcorntime /home/michael/proj/contrib ~/.autojump/bin /home/michael/proj/fzf/bin

    set PATH $mypaths $javapaths $builtinpaths
end

set-path


function remove-pdf-watermark2
    set watermark "Licensed to michael rose <Michael@rosenetwork.net>"
    set file $argv[1]
    set tmp /tmp/pdf_{$file}
    pdftk $argv output $tmp uncompress
    replacestr $watermark '' $tmp
    cp $tmp out.pdf
    pdftk $tmp output $file compress
    rm $tmp
end

function choose-library
    switch-library (rfi match (ls ~/calibre))
end

function choose-image
    set current (pwd)
    set path $argv
    cd $path
    echo $path/(sxiv -tfo *.jpg *.png *.bmp)
    cd $current
end

function randombg
    set backgrounddir /mnt/ext/Images/backgrounds
    set images (findall $backgrounddir jpg jpeg bmp png)
    set num (rand -M (count $images))
    feh --bg-scale $images[$num]
end

function choose-background
    wp scale (choose-image /mnt/ext/Images/backgrounds)
end

function replacestr
    set com perl -0777 -i.original -pe \'s/$argv[1]/$argv[2]/igs\' $argv[3]
    eval $com
end

function on_i3_events --description "watches the events described and evaluates the function with the same name as events if it exists"
    i3subscribe $argv | while read -l line
                            if defined $line
                                eval $line
                            end
                        end
end

function tstfn
end

function workspace:focus
    echo ws focus
end

function window:focus
    signal-i3blocks windowtitle
end

function window:new
    echo win new
end

function evaluate
    if defined $argv[1]
        eval $argv
    end
end

function apply-transparency
    for i in (list-windows id)
        transset -i $i (return-trans-value (return-winclass $i)) > /dev/null
    end
    for i in (get-i3bar-ids)
        transset -i $i 0.9 > /dev/null
    end
end

function set-trans
    transset -i (mywin) (return-trans-value (return-winclass (mywin)))
end

function return-winclass
    xprop  WM_CLASS -id $argv | cut -d '"' -f4
end


function return-trans-value
    set app (echo $argv | cut -d " " -f4 | cut -d "." -f1)
    switch $app
        case Qvim
            echo 0.9
        case Clementine
            echo 0.89
        case Dolphin
            echo 0.9
        case Hexchat
            echo 1.0
        case i3bar
            echo 0.8
        case "*"
            echo 1.0
    end
end

function remap
    switch $argv[1]
        case key
            set type keysym
            set key1 $argv[2]
            set key2 $argv[3..-1]
        case code
            set type keycode
            set key1 $argv[2]
            set key2 $argv[3..-1]
        case "*"
            set type keysym
            set key1 $argv[1]
            set key2 $argv[2..-1]
    end
    xmodmap -e "$type $key1 = $key2"
end

function toggle-symbol-lock
    if [ $symbollock = true ]
        remap code 10 1 exclam
        remap code 11 2 at
        remap code 12 3 numbersign
        remap code 13 4 dollar
        remap code 14 5 percent
        remap code 15 6 asciicircum
        remap code 16 7 ampersand
        remap code 17 8 asterisk
        remap code 18 9 parenleft
        remap code 19 0 parenright
        set symbollock false
    else
        remap code 10 exclam 1
        remap code 11 at 2
        remap code 12 numbersign 3
        remap code 13 dollar 4
        remap code 14 percent 5
        remap code 15 asciicircum 6
        remap code 16 ampersand 7
        remap code 17 asterisk 8
        remap code 18 parenleft 9
        remap code 19 parenright 0
        set symbollock true
    end
end

function inbg
    ff $argv &
    bg %(echo (jobs)[-1] | cut -f1)
end

function window-title-status-line
    echo (center-text (window-title | cut -c1-120))
end

function diffcom
    diff (write-file (eval $argv[1])) (write-file (eval $argv[2]))
end

function get-i3-setting
    cat ~/.i3/config | grep "$argv" | condense_spaces | cut -d " " -f2-
end

function get-i3bar-ids
    xwininfo -all -root | grep 'i3bar for output' | condense_spaces | cut -d " " -f1
end

function process-schedule
    for i in (cat $argv)
        work $i
    end
end

function mm-dmenu
    eval media-ctl (dm choice "enter a command for media-ctl")
end

function take
    set lst $argv[2..-1]
    for i in (range (lesserof $argv[1] (count $lst)))
        echo $lst[$i]
    end
end

function lesserof
    if test $argv[1] -lt $argv[2]
        echo $argv[1]
    else
        echo $argv[2]
    end
end

function greaterof
    if test $argv[1] -gt $argv[2]
        echo $argv[1]
    else
        echo $argv[2]
    end
end
        

function padded
    set val $argv
    for i in (range 30)
        set val $val ""
    end
    println $val
end

function sxs
    set xs (padded $xs)
end

function xs
    if test (count $xs) -ge $argv
        echo $xs[$argv]
    end
end

function sopen
    if test -f $argv
        eval open (quote $argv)
    end
end

function outerfn
    set xs $argv
    xs 2..-1
    innerfn
    # echo val of xs is $xs in outer
end

function innerfn
    set xs fuck
    # echo set xs in inner
end

function update-penta
    git -C ~/proj/dactyl pull
    make -C ~/proj/dactyl/pentadactyl install
    killall firefox
    firefox &
end

function doit
    sudo $history[1]
end

function uid
    # echo (seconds)(random)
    uuidgen
end

# function startiton
#     set layout /tmp/(echo (uid)-layout)
#     set workspace $argv[1]
#     set app $argv[2]
#     set winclass (return-windowclass $app)
#     save-workspaces
#     cat ~/test.json | sed "s/#winclass/$winclass/g" > $layout
#     ws $workspace
#     im append_layout $layout
#     fish -c $app &
#     restore-workspaces
#     rm $layout
# end

function startiton
    set workspacelist (odds $argv)
    set applist (evens $argv)
    echo printing ws
    println $workspacelist
    echo printing apps
    println $applist
    save-workspaces

    for i in (range (count $workspacelist))
        set layout /tmp/(echo (uid)-layout)
        set workspace $workspacelist[$i]
        set app $applist[$i]
        set winclass (return-windowclass $app)
        echo w is $winclass and a is $app
        cat ~/test.json | sed "s/#winclass/$winclass/g" > $layout
        ws $workspace
        im append_layout $layout
        fish -c "$app &"
        rm $layout
    end
    restore-workspaces
    sleep 3
    apply-transparency
end

function is-even
    test (modulo $argv 2) -eq 0
end

function is-odd
    test (modulo $argv 2) -ne 0
end

function modulo
    math "$argv[1] % $argv[2]"
end

function odds
    for i in (range (count $argv))
        if is-odd $i
            set acc $acc $argv[$i]
        end
    end
    println $acc
end

function evens
    for i in (range (count $argv))
        if is-even $i
            set acc $acc $argv[$i]
        end
    end
    println $acc
end

function fn
    switch $argv[1]
        case -h
            set fn (functions $argv[2])
            echo $fn | cut -d "'" -f2
        case -i
            funced -i $argv[2]
        case -l
            get-line-of-fn-definition $argv[2]
        case -le
            get-end-line-of-fn-definition $argv[2]
        case -e
            fed $argv[2]
        case -d 
            defined-in $argv[2]
        case "*"
            functions $argv
    end
end

function get-size-of-fn
    count (functions $argv)
end

function delete-lines
    set start $argv[1]
    set end $argv[2]
    set file $argv[3]
    sed -i -e "$start,$end d" $file
end

function get-end-line-of-fn-definition
    set begining (get-line-of-fn-definition $argv)
    set size (get-size-of-fn $argv)
    set ending (math "$begining + $size -1")
    echo $ending
end
    

set-similar-completions fn funced

function truncate-num
    switch (count $argv)
        case 1
            echo $argv | cut -d "." -f1
        case "*"
            set places $argv[-1]
            set wholenumber (echo $argv[1..-2] | cut -d "." -f1)
            set dec (echo $argv | cut -d "." -f2- | cut -c1-$places)
            echo {$wholenumber}.{$dec}
   end
end

function within
    set num $argv[2]
    set min (echo $argv[1] | cut -d "-" -f1)
    set max (echo $argv[1] | cut -d "-" -f2)
    test $num -ge $min -a $num -le $max
end

function set-appropriate-colorscheme
        set daylight 8-19
        if within $daylight (hours)
            colorscheme greenandyellow
            echo yellow
        else
            colorscheme blue
            echo blue
        end
end

function hours
    date '+%H'
end

function get-i3-assignments
    set assignments (cat ~/.i3/config | grep "assign \[" | condense_spaces)
    set conditions (println $assignments | cut -d "[" -f2 | cut -d "]" -f1 | trim)
    set workspaces (println $assignments | cut -d " " -f4)
    for i in (range (count $assignments))
        echo $conditions[$i] $workspaces[$i]
    end
end

function shortest
        set shortest $argv[1]
        for i in $argv
            if test (sizeof $i) -lt (sizeof $shortest)
                set shortest $i
            end
        end
        echo $shortest
end


function scd
    set numargs (count $argv)
    switch $numargs
        case "1"
            cd $argv
        case "2"
            cd (echo (pwd) | sed "s/$argv[1]/$argv[2]/g")
   end
end

function change-to-subdir
    set dirs (println (find . -maxdepth 4 -type d))
    set matches (println $dirs | grep --regex /$argv\$)
    if exists $matches
        cd (shortest $matches)
    end
end

alias cs change-to-subdir

function autojump-with-returnval
    directorychanged j $argv
end

function directorychanged
    set dir (pwd)
    eval $argv
    set newdir (pwd)
    if [ $dir = $newdir ]
        return 1
    else
        return 0
    end
end

function c
    if test -d $argv
        cd $argv
    else if false #bmark exists
        echo goto bmark
    else if change-to-subdir $argv
    else if autojump-with-returnval $argv
    else
        return 1
    end
end

function evaluate-list
    for i in $argv
        if startswith @ $i
            set msg $msg (cdr $i)
        else
            set msg $msg (eval $i)
        end
    end
    echo $msg
end

function reload-config
    source ~/.config/fish/config.fish
end

# function function-save
#     set newfn (functions $argv)
#     reload-config
#     set oldfn (functions $argv)
#     set file (fn -d $argv)
#     set start (fn -l $argv)
#     set end (fn -le $argv)
#     println $oldfn
#     echo with
#     println $newfn
#     echo delete-lines $start $end $file 
# end

function rfi
    set bindings -kb-accept-custom "Return"
    switch $argv[1]
        case run
            rofi $bindings -show run
        case window
            rofi -show window
        case match
            println $argv[3..-1] | rofi -dmenu -p $argv[2]
        case ssh
            rofi -show ssh
        case windows
            choose-window all
        case visible
            choose-window visible
        case vpn
            vpn choose
        case books
            books
        case volume
            choose-volume
        case video
            choose-video
        case music
            choose-music
        case trans
            choose-trans
        case library
            choose-library
        case session
            choose-session
        case bg
            choose-background
    end
end

function psf
    ps -A | grep -i "$argv"
end

function fzz
    set tmp /tmp/fzf-result
    fzf -q "$argv[2]" > $tmp
    set fquery (cat $tmp)
    eval $argv[1] \'$fquery\'
end

function clipboard
    if exists $argv
        eval $argv | clipboard
    else
        xclip -selection clipboard -i
    end
end

function wf
    eval $argv | psub
end

function in-terminal
    pstree -s %self | grep urxvtd > /dev/null
end

function sendit
    if in-terminal
        switch $argv[1]
            case -p
                println $argv[2..-1]
            case "*"
                echo $argv
        end
    else
        msg $argv
    end
end

function waituntilfocused
    while not [ (winclass) = $argv ]
    end
end

function view-images
    if exists $argv
        set target $argv
    else
        set target (pwd)
    end
    sxiv -tbfor $target &
end

al pics view-images


function l
    ls++ --ptsf $argv
end

function select-background
    set tmp /tmp/background-choice
    view-images /mnt/ext/Images/backgrounds > $tmp
    echo (cat $tmp)
    # rm $tmp 
end

function view-wininfo
    set id (mywin)
    set tmp /tmp/wininfo-(uid)
    echo XPROP >> $tmp
    echo ----- >> $tmp
    echo " " >> $tmp
    xprop -id $id >> $tmp
    echo " " >> $tmp
    echo XWININFO >> $tmp
    echo -------- >> $tmp
    echo " " >> $tmp
    xwininfo -id $id -all >> $tmp
    eval $EDITOR $tmp
end

function sustatus
    set -U sustatus sudo
end

function run-appkey-as-su
    set app (return-program-name (appkey $argv))
    if [ $app = urxvtc ]
        set app urxvt
    end
    eval sudo $app &
    er vi3op
    update-op-status
end

function mdman
     grep -v "\-\-\-\-\-" $argv | pandoc -s -f markdown -t man | groff -T utf8 -man | less
 end

 function testd
     if eval $argv > /dev/null
     end
 end

function image-date
    identify -verbose 00046.jpg | grep DateTimeOriginal | cut -d ":" -f3- | trim
end

function areweonline
    ping 8.8.8.8 -c 1 -W 1 > /dev/null
end

function file-bg
    set file $argv[1]
    set name $argv[2]
    set ext (get-ext $file)
    set location /mnt/ext/Images/backgrounds/$name.$ext
    if test -f $location
        echo it already exists
    else
        mv $file $location
    end
end

function file-bg-url
    set url (xclip -o)
    set name $argv[1]
    set ext (get-ext $url)
    set tmp background-url.$ext
    curl $url > /tmp/$tmp
    cd /tmp
    file-bg $tmp $name
end

alias bfu file-bg-url

function escapeme
    set val \'$argv\'
    echo \'$val\' | sed 's/*/\*/g' | sed 's/?/\?/g'
end

function gimpfromstdin
    while read -l line
        gimp $line
    end
end


function zoomsxiv
    set title (xprop -id (mywin) | grep NET_WM_NAME | cut -d "=" -f2- | trim | cut -d '"' -f2)
    if [ $title = sxiv ]
        xdotool key --delay 5 plus plus plus
    end
end

function bind-term-keys
    bind \cb randombg
    bind \cr reload-config
end

bind-term-keys

